## Docker Image

In Docker, an image is a lightweight, standalone, and executable software package that contains everything needed to run a piece of software, including the code, runtime environment, libraries, and system tools. Docker images serve as the building blocks for containers.

An image is created from a set of instructions called a Dockerfile. A Dockerfile defines the steps needed to build the image, such as installing dependencies, configuring the environment, and copying the application code. These instructions are executed in order to create a reproducible and consistent image

# Key characteristics of Docker images:

1. Portability: Docker images are portable and can be run on any system that has Docker installed. This portability allows for consistent deployment across different environments, from development to production.

2. Isolation: Each Docker image runs in an isolated environment known as a container. Containers ensure that the software inside the image runs consistently regardless of the host system, making it easier to package and distribute applications.

3. Layered Architecture: Docker images are composed of multiple layers. Each layer represents an instruction in the Dockerfile. Layers are cached, and if an image is built again with only minor changes, Docker can reuse the cached layers, resulting in faster build times.

4. Versioning: Docker images can be versioned and tagged, allowing for precise control and management of different versions of an application or its dependencies. This makes it easy to roll back to a previous version or deploy multiple versions simultaneously.


# List docker images:

docker image ls

## To build a Docker image first we need to create a Dockerfile with below details

# Sample Nodejs WebApp 
FROM node:latest
WORKDIR /usr/src/app
RUN npm install -g serve
COPY ./display ./display
EXPOSE 80
CMD serve ./display
CMD [“node”, “server.js”]

## Dockerfile Explained

# Specify a base image:

Usage: FROM <base image>
Example: FROM node:latest

# Set a working directory for the container:

Usage: WORKDIR <dir>
Example: WORKDIR /usr/src/app

# Run a command for the container image:

Usage: RUN command
Example: RUN npm install -g serve

# Copy files into the container:

Usage: COPY <local files/directories> <container files/directories>
Example: COPY ./display ./display

# Inform that a port should be exposed

Usage: EXPOSE <port>
Example: EXPOSE 80

# Specify a default command for the container:

Usage (shell format): CMD <default command>
Example: CMD serve ./display

Usage (exec format, recommended): CMD [“default command”, “arguments”]
Example: CMD [“node”, “server.js”]

# Build a Docker image from Dockerfile:

Usage: docker build <path>
Example (also tags and names the build): docker build . -t Node/WebApp:1.0.0
(-t is used for tagging a Docker Image)

# Create Docker Container with a name and use existing Node/WebApp:1.0.0 docker image

Usage: docker create -it --name=<name> <image>
Example: docker create -it --name=NodeWebApp Node/WebApp:1.0.0

# List all running containers:

Example: docker container ls
Example: docker ps 

# Checking Docker Image history

Usage: docker image history <container id>
Example: docker image history cfbsa

# Inspecting a Docker Image

Usage: docker image inspect <container id>
Example:  docker image inspect cfbsa

# Deleting a Docker Image

Usage: docker image remove <container id>
Example:  docker image remove cfbsa

